int main(int x1, char ** x2) {
  extern int printf(const char * restrict x1, ...);
  unsigned char f1(const char * x1, unsigned char * x2);
  printf("%s\n", x2[1]);
  unsigned char v2[4] = {0, 0, 0, 0};
  unsigned char v3 = f1(x2[1], v2);
   
  unsigned char v4 = 0;
  while (v4 != 4) {
    printf("%d ", v2[v4]);
    ++v4;
  }
  printf("\n");
  v4 = 0;
  while (v4 != 4) {
    printf("%b ", v2[v4]);
    ++v4;
  }
  printf("\n");
  unsigned char b1 = 0b11000000;
  unsigned char b2 = 0b10101000;
  unsigned char b3 = 0b00000010;
  unsigned char b4 = 0b11111111;
  printf("%d %d %d %d\n", b1, b2, b3, b4);
   
  unsigned char v5 = 0;
  void f2(unsigned char x1, unsigned char * x2, unsigned char x3);
  unsigned char v6[4][8];
  unsigned char v7 = 0;
  while (v5 != 4) {
    f2(v2[v5], v6[v5], 8);
    v7 = 0;
    printf("%s", "oct beg: ");
    while (v7 != 8) {
      printf("%d ", v6[v5][v7]);
      ++v7;
    }
    printf("%s\n", "oct end");
    ++v5;
  }
  printf("\n");
   
  // logical not
  void f3(unsigned char ** x1, unsigned char x2);
  if (v3 != 0) {
    unsigned char v8 = 0;
    v8 = x2[v3 + 1] - 48;
    if (x2[v3 + 2] != '\0') {
      v8 = v8 * 10;
      v8 = x2[v3 + 2];
    }
    f3(v6, v8); 
  }
   
  v5 = 0; v7 = 0;
  while (1) {
    printf("%d ", v6[v5][v7]);
    ++v7;
    if ((v5 == 3) && (v7 == 7)) {
      break;
    }
    if (v7 == 7) {
      ++v5;
      v7 = 0;
      printf("\n");
    }
  }
     
  return 0;
}
// 7 % 2 = 1; 3 % 2 = 1; 1
void f2(unsigned char x1, unsigned char * x2, unsigned char x3) {
  extern int printf(const char * restrict x1, ...);
  while (1) {
    x2[x3 - 1] = x1 % 2;
    printf("%d ", x2[x3 - 1]);
    x1 = x1 / 2;
    if ((x1 == 1) || (x1 == 0)) {
      x2[x3 - 2] = x1;
      printf("%d", x2[x3 - 2]);
      if ((x3 - 2) != 0) {
        unsigned char v1 = 0;
        while ((x3 - 1) - v1) {
          x2[x3 - 2 - v1] = 0;
          ++v1;
        }
      }
      break;
    }
    --x3;
  }
  printf("\n");
}
/**
 * str2int: ipv4 format.
 * x1 -- what to convert;
 * x2 -- where to store result;
 * ret index of '/' if there is, else 0
 **/
unsigned char f1(const char * x1, unsigned char * x2) {
  extern int printf(const char * restrict x1, ...);
  unsigned char v1 = 0;
  unsigned char v2 = 0;
  while (v1 != 4) {
    x2[v1] += x1[v2] - 48;
    if ((x1[v2 + 1] != '.') && (x1[v2 + 1] != '/') && (x1[v2 + 1] != '\0')) {
      x2[v1] = x2[v1] * 10;
    }
    else {
      ++v1;
      ++v2;
    }
    ++v2;
    printf("x2[%d]=%d, x1[%d]=%c\n", v1, x2[v1], v2, x1[v2]);
  }
  printf("x1[%d]=%c\n", v2 - 1, x1[v2 - 1]);
  if (x1[v2 - 1] == '/') {
    printf("%s\n", "with");
    return v1 - 1;
  }
  printf("%s\n", "just");
  return 0;
}


void f3(unsigned char ** x1, unsigned char x2) {
  unsigned char v1 = 0;
  unsigned char v2 = 0;
  if (x2 <= 8) {
    v1 = 0;
    v2 = x2 - 1;
  }
  else if (x2 <= 16) {
    v1 = 1;
    v2 = x2 - 8;
  }
  else if (x2 <= 24) {
    v1 = 2;
    v2 = x2 - 16;
  }
  else {
    v1 = 3;
    v2 = x2 - 24;
  }
  while (1) {
    if (x1[v1][v2] == 0) {
      x1[v1][v2] = 1;
    }
    else {
      x1[v1][v2] = 0;
    }
    if ((v2 == 7) && (v1 == 3)) {
      break;
    }
    if (v2 == 7) {
      ++v1;
      v2 = 0;
    }
    ++v2;
  }
}
