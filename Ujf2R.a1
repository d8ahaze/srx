typedef unsigned long int size_t;

int main(int x1, char ** x2) {
  extern int printf(const char * restrict x1, ...);
  unsigned char f1(const char * x1, unsigned char * x2);
  extern void * malloc(size_t x1);
  void f2(unsigned char x1, unsigned char ** x2, unsigned char x3);
  void f3(unsigned char * x1, unsigned char x2, unsigned char * x3);
  void f5(unsigned char ** x1, unsigned char x2);
  void f3_2(unsigned char * x1, unsigned char x2, unsigned char * x3);
   
  if (x1 == 1) {
    printf("%s\n", "provide IPv4 address");
  }
   
  /* counters */
  unsigned char v5;
  unsigned char v7;
   
  /* convert ipv4 string to decimal */
  unsigned char v2[4] = {0, 0, 0, 0};
  unsigned char v3 = f1(x2[1], v2);
   
  /* convert four decimals to four octets of bins */
  v5 = 0;
  unsigned char ** v6 = malloc(sizeof(unsigned char *) * 4);
  while (v5 != 4) {
    f2(v2[v5], v6 + v5, 8);
    ++v5;
  }
   
  /* convert subnet mask to decimal; display ip/subnet as input */
  unsigned char v1 = 0;
  if (v3 != 0) {
    v1 = x2[1][v3 + 1] - 48;
    if (x2[1][v3 + 2] != '\0') {
      v1 *= 10;
      v1 += x2[1][v3 + 2] - 48;
    }
  }
  printf("Input: %d.%d.%d.%d/%d\n", v2[0], v2[1], v2[2], v2[3], v1);
   
  /* display ip address as binary, decimal */
  v5 = 0;
  v7 = 0;
  printf("%s", "IP address:  ");
  while (1) {
    printf("%d", v6[v5][v7]);
    if (v7 == 3) {
      printf("%s", "'");
    }
    if (v7 == 7) {
      if (v5 == 3) {
        printf(" (%d.%d.%d.%d)\n", v2[0], v2[1], v2[2], v2[3]);
        break;
      }
      ++v5;
      v7 = 0;
      printf(" ");
      continue;
    }
    ++v7;
  }
   
  /* generate binary subnet mask */
  unsigned char v4[32];
  v5 = 0;
  while (v5 != v1) {
    v4[v5] = 1;
    ++v5;
  }
  while (v5 != 32) {
    v4[v5] = 0;
    ++v5;
  }
   
  /* convert binary subnet mask to decimal */
  unsigned char v8[4] = {0, 0, 0, 0};
  f3(v4, 8, v8);
   
  /* display binary, decimal subnet mask */
  v5 = 0;
  printf("%s", "Subnet mask: ");
  while (1) {
    printf("%d", v4[v5]);
    if ((v5 == 3) || (v5 == 11) || (v5 == 19) || (v5 == 27)) {
      printf("%s", "'");
    }
    if ((v5 == 7) || (v5 == 15) || (v5 == 23)) {
      printf("%s", " ");
    }
    if (v5 == 31) {
      printf(" (%d.%d.%d.%d)\n", v8[0], v8[1], v8[2], v8[3]);
      break;
    }
    ++v5;
  }
   
  /* apply 'bitwise and' on octs of ip adr (v2) and subnet mask (v8), store results
     in v10 as decimals, in v9 as bins. then display them. */
  unsigned char ** v9 = malloc(sizeof(unsigned char *) * 4);
  unsigned char v10[4];
  v5 = 0;
  while (v5 != 4) {
    v10[v5] = v2[v5] & v8[v5];
    f2(v10[v5], v9 + v5, 8);
    ++v5;
  }
  printf("%s", "Network IP:  ");
  v5 = 0; v7 = 0;
  while (1) {
    printf("%d", v9[v5][v7]);
    if (v7 == 3) {
      printf("%s", "'");
    }
    if (v7 == 7) {
      printf("%s", " ");
      if (v5 == 3) {
        printf("(%d.%d.%d.%d)\n", v10[0], v10[1], v10[2], v10[3]);
        break;
      }
      ++v5;
      v7 = 0;
      continue;
    }
    ++v7;
  }
   
  // bitwise not
  f5(v9, v1); 
  v5 = 0; v7 = 0;
  printf("%s", "Broadcast:   ");
  while (1) {
    printf("%d", v9[v5][v7]);
    ++v7;
    if ((v5 == 3) && (v7 == 8)) {
      break;
    }
    if (v7 == 4) {
      printf("%s", "'");
    }
    if (v7 == 8) {
      ++v5;
      v7 = 0;
      printf("%s", " ");
    }
  }
  unsigned char v11[4] = {0, 0, 0, 0};
  v5 = 0;
  while (v5 != 4) {
    f3_2(v9[v5], 8, v11 + v5);
    ++v5;
  }
  printf(" (%d.%d.%d.%d)\n", v11[0], v11[1], v11[2], v11[3]);
   
  return 0;
}

/**
 * str2int: ipv4 format.
 * x1 -- what to convert;
 * x2 -- where to store result;
 * ret index of '/' if there is, else 0
 **/
unsigned char f1(const char * x1, unsigned char * x2) {
  extern int printf(const char * restrict x1, ...);
  unsigned char v1 = 0;
  unsigned char v2 = 0;
  while (v1 != 4) {
    x2[v1] += x1[v2] - 48;
    if ((x1[v2 + 1] != '.') && (x1[v2 + 1] != '/') && (x1[v2 + 1] != '\0')) {
      x2[v1] = x2[v1] * 10;
    }
    else {
      ++v1;
      ++v2;
    }
    ++v2;
  }
  if (x1[v2 - 1] == '/') {
    return v2 - 1;
  }
  return 0;
}

/**
 * dec2bin: for set of calls.
 * x1 -- decimal to convert;
 * x2 -- array in the heap containig pointers to arrays of unsigned chars, each
 * of arrays contain converted binary. You should allocate memory for main array
 * and for each call give its addresses of indices;
 * x3 -- expand minor array to this length. E.g. 7 is 111 but with x3=8, minor
 * array will contain 0,0,0,0,0,1,1,1;
 **/
void f2(unsigned char x1, unsigned char ** x2, unsigned char x3) {
  extern void * malloc(size_t x1);
  *x2 = malloc(sizeof(unsigned char) * x3);
  while (1) {
    (*x2)[x3 - 1] = x1 % 2;
    x1 /= 2;
    if ((x1 == 1) || (x1 == 0)) {
      (*x2)[x3 - 2] = x1;
      if ((x3 - 2) != 0) {
        unsigned char v1 = 0;
        while ((x3 - 1) - v1) {
          (*x2)[x3 - 2 - v1] = 0;
          ++v1;
        }
      }
      break;
    }
    --x3;
  }
}

// bin2int
void f3(unsigned char * x1, unsigned char x2, unsigned char * x3) {
  unsigned char f4(unsigned char x1, unsigned char x2);
  unsigned char v1 = 1;
  unsigned char v2 = 0;
  unsigned char v3 = 0;
  while (v3 < 4) {
    while (v1 != (x2 + 1)) {
      x3[v3] += x1[v2] * f4(2, x2 - v1);
      ++v1;
      ++v2;
    }
    v1 = 1;
    ++v3;
  }
}

// bin2int
void f3_2(unsigned char * x1, unsigned char x2, unsigned char * x3) {
  unsigned char f4(unsigned char x1, unsigned char x2);
  unsigned char v1 = 1;
  unsigned char v2 = 0;
  while (v1 != (x2 + 1)) {
    if (x1[v2] == 0) {
      ++v2;
      continue;
    }
    *x3 += x1[v2] * f4(2, x2 - v1);
    ++v1;
    ++v2;
  }
}

unsigned char f4(unsigned char x1, unsigned char x2) {
  unsigned char v1 = x1;
  if (x2 == 0) {
    return 1;
  }
  if (x2 == 1) {
    return x1;
  }
  while (x2 - 1) {
    x1 *= v1;	// x1 2 4 8 16 32
    --x2;	// x2 5 4 3 2  1
  }
  return x1;
}

void f5(unsigned char ** x1, unsigned char x2) {
  // extern int printf(const char * restrict x1, ...);
  unsigned char v1 = 0;
  unsigned char v2 = 0;
  if (x2 < 8) {
    v1 = 0;
    v2 = x2 - 1;
  }
  else if (x2 < 16) {
    v1 = 1;
    v2 = x2 - 8;
  //  printf("elif2: %d %d %d\n", v1, x2, v2);
  }
  else if (x2 < 24) {
    v1 = 2;
    v2 = x2 - 16;
  //  printf("elif3: %d %d %d\n", v1, x2, v2);
  }
  else {
    v1 = 3;
    v2 = x2 - 24;
  }
  while (1) {
   // printf("before: f3.x1[%d][%d] = %d\n", v1, v2, x1[v1][v2]);
    if (x1[v1][v2] == 0) {
      x1[v1][v2] = 1;
    }
    else {
      x1[v1][v2] = 0;
    }
    // printf("after: f3.x1[%d][%d] = %d\n", v1, v2, x1[v1][v2]);
    if ((v2 == 7) && (v1 == 3)) {
      break;
    }
    if (v2 == 7) {
      ++v1;
      v2 = 0;
      continue;
    }
    ++v2;
  }
}
